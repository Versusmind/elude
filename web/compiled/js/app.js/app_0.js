angular.module('app', [
    'myo',
    'app.config'
]);

'use strict';

angular.module('app.config', [])

    .constant('appname', 'Myo2')

    .constant('version', 'v0.1.0')

    .constant('appdir', 'assets/app')

    //apiConfig is mandatory to use "Api" service of Myo
    .constant('apiConfig', {
        'url': '/api/v1', //you can set the whole URL here : e.g http://example.com/api/v1
        'token': {
            //read the auth token from the html (generated by the PHP part of Myo2)
            // this is why we have to include jquery ...
            'type': $('meta[name="token_type"]').prop('content'), //this should be "Bearer" if you use Myo as a WS
            'access': $('meta[name="access_token"]').prop('content'),
            'refresh': $('meta[name="refresh_token"]').prop('content')
        },
        'client': {
            'id': 'versusmind',
            'secret': 'versusmind'
        }
    })

    .config(function($urlRouterProvider, $locationProvider) {

        // For any unmatched url, redirect to /home
        $urlRouterProvider.otherwise('/home');
        //states are configured in each controller..

        $locationProvider.html5Mode(true);
    });

'use strict';

/**
 *  Myo2 Angular module.
 **/
angular.module('myo', [

    /**
     *  All the dependencies are handled by bower.
     *  To add a new lib here:
     *  1. bower install --save restangular
     *  2. Add a line in config/assets.php for the PHP to include your file in the html
     *  3. Add a line down there.
     **/

    'ui.router',  //Allows to register routes for your app
    'ui.bootstrap', //Integrate bootstrap components to AngularJS
    'pascalprecht.translate', //Handle app content translation
    'restangular', //Handles API calls
    'smart-table', //Generate custom, searchable, filterable, paginated table based on data
    'angular-loading-bar' //Automagically show spinner when ajax calls are made (https://github.com/chieffancypants/angular-loading-bar)

])
.config(function($translateProvider, cfpLoadingBarProvider) {

    //Configure the translation (see http://angular-translate.github.io/ for more informations)
    $translateProvider.useSanitizeValueStrategy('escape');
    $translateProvider.preferredLanguage('fr');

    //Configure the loading bar
    cfpLoadingBarProvider.includeSpinner = false;
});

'use strict';

angular.module('app')
.config(function($stateProvider, appdir) {
    $stateProvider.state('admin-groups', {
        url: '/admin/groups',
        templateUrl: appdir + '/components/admin/adminGroups.html',
        controller: 'adminGroupsController'
    });
})
.controller('adminGroupsController', function($scope, MyoEntityUiConstants) {

    // Configure the entity (to call myoEntityUi Directive with it)
    $scope.groupEntity = {
        title: 'Groups',
        reference: 'groups',
        fields: [
            {
                key: 'id',
                title: '#',
                type: MyoEntityUiConstants.NUMBER,
                display: true,
                edit: false
            },
            {
                key: 'created_at',
                title: 'Créé',
                type: MyoEntityUiConstants.DATE,
                display: true,
                edit: true
            },
            {
                key: 'updated_at',
                title: 'Mis à jour',
                type: MyoEntityUiConstants.DATE,
                display: true,
                edit: true
            }
        ]
    };

});
'use strict';

angular.module('app')
.config(function($stateProvider, appdir) {
    $stateProvider.state('admin-users', {
        url: '/admin/users',
        templateUrl: appdir + '/components/admin/adminUsers.html',
        controller: 'adminUsersController'
    });
})
.controller('adminUsersController', function($scope, MyoEntityUiConstants) {

    // Configure the entity (to call myoEntityUi Directive with it)
    $scope.userEntity = {
        title: 'Users',
        reference: 'users',
        fields: [
            {
                key: 'id',
                title: '#',
                type: MyoEntityUiConstants.NUMBER,
                display: true,
                edit: false
            },
            {
                key: 'username',
                title: 'Login',
                type: MyoEntityUiConstants.TEXT,
                display: true,
                edit: true
            },
            {
                key: 'email',
                title: 'Email',
                type: MyoEntityUiConstants.TEXT,
                display: true,
                edit: true
            },
            {
                key: 'created_at',
                title: 'Créé',
                type: MyoEntityUiConstants.DATE,
                display: true,
                edit: true
            },
            {
                key: 'updated_at',
                title: 'Mis à jour',
                type: MyoEntityUiConstants.DATE,
                display: true,
                edit: true
            }
        ]
    };

});
'use strict';

angular.module('app')
.config(function($stateProvider, appdir) {
    $stateProvider.state('home', {
        url: '/home',
        templateUrl: appdir + '/components/home/home.html',
        controller: 'homeController'
    });
})
.controller('homeController', function($scope) {
    
    $scope.test = 'Yop';
    
});
'use strict';

angular.module('myo')
.config(function($translateProvider) {

    $translateProvider.translations('fr', {
        'Home': 'Accueil',
        'Logout': 'Déconnexion',
        'Users': 'Utilisateurs',
        'Groups': 'Groupes'
    });

});
'use strict';

angular.module('myo')
/**
 *  Api for Myo is a wrapper for Restangular ressources
 *
 *  see https://github.com/mgonto/restangular for more infos about the returned data
 *
 *  Example of use :     Api.getList('users').then(function(users){
 *                           angular.forEach(users, function(user){
 *                                   ....
 *                          });
 *                       });
 *
 *                      will trigger :    GET /api/v1/users
 *
 **/
.service('Api', function(Restangular, apiConfig, $http) {

    var Api = Restangular,
        cfg = apiConfig;

    /*************************************
     *   Project configuration for       *
     *            Restangular            *
     *************************************/

    //configure the base URL of the api if necessary
    // (this is configurable by changing the "apiUrl" constant in your config file
    if (cfg.url) {
        Api.setBaseUrl(cfg.url);
    }

    function updateToken(data) {
        if (cfg.token && cfg.token.type) {
            if (data && data.access_token) {
                cfg.token.access = data.access_token;
                cfg.token.refresh = data.refresh_token;
            }

            Api.setDefaultHeaders({
                'Authorization': cfg.token.type + ' ' + cfg.token.access,
                'Accept': 'application/json'
            });
            return true;
        }
        return false;
    }
    updateToken();

    function refreshAccesstoken() {
        return Api.all('oauth/access_token').post({
            'refresh_token': cfg.token.refresh,
            'grant_type': 'refresh_token',
            'client_id': cfg.client.id,
            'client_secret': cfg.client.secret
        });
    }

    //set up a catcher for Myo WS errors (acccess token expired, and such)
    Api.setErrorInterceptor(function(response, deferred, responseHandler) {
        switch (response.status) {
            case 401:
                refreshAccesstoken().then(function(tokenData) {
                    //Save the new tokens
                    if (tokenData &&  updateToken(tokenData)) {
                        //update current request headers
                        angular.forEach(Api.defaultHeaders, function(header, headerKey) {
                            response.config.headers[headerKey] = header;
                        });
                        // Repeat the request and then call the handlers the usual way.
                        $http(response.config).then(responseHandler, deferred.reject);
                    } else {
                        deferred.reject();
                    }
                });
                return false; // error handled
            case 500:

                return false; // error handled
        }
        return true; // error not handled
    });

    /*************************************
     *   Standard configuration for      *
     *            Restangular            *
     *************************************/

    Api.setParentless(true);

    /*************************************
     *   Surcharge Restangular object    *
     *   with homemade methods           *
     *************************************/

    /**
     *  Api.getList(route, params [Optionnal]) is equivalent as "Api.all(route,params).getList()"
     *  returns a Promise
     **/
    Api.getList = function(route, params) {
        return this.all(route, params).getList();
    }.bind(Restangular);

    /**
     *  Api.paginate(route, page [Optionnal], itemsByPage [Optionnal], params [Optionnal])
     *  returns a Promise
     **/
    Api.paginate = function(route, page, itemsByPage, params) {
        params = params || {};

        params.paginate = 1;
        params.nbByPage = itemsByPage || 30;
        params.page  = page || 1;

        return this.getList(route, params);
    };

    //returns a Restangular clone !
    //All the doc for Restangular is usable on this object !
    return Api;
});

'use strict';

angular.module('app')
.directive('appContent', function(appdir) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        scope: {
            nope: '='
        },
        controller: function($scope, $rootScope, $location) {


        },
        templateUrl: appdir + '/shared/content/content.html'
    };
});
'use strict';

angular.module('app')
.directive('appHeader', function(appdir, appname) {
    return {
        restrict: 'E',
        scope: {
            'appname' : '='
        },
        controller: function($scope, $rootScope, $location) {

            $scope.appname = appname;

            $scope.menuLeft = {
                'Home': '#/home'
            };

            $scope.menuRight = {
                'Administration': {
                    link: '#/admin/users',
                    subItems: {
                        'Users': '#/admin/users',
                        'Groups': '#/admin/groups'
                    }
                },
                'Logout': '/auth/logout'
            };

        },
        templateUrl: appdir + '/shared/header/header.html'
    };
});
'use strict';

angular.module('myo')
/**
 *  Define constants for myoEntityUi
 **/
.constant('MyoEntityUiConstants', {
    TEXT: 0,
    NUMBER: 1,
    DATE: 2
})
/**
 *  myoEntityUi is a directive that generate a complete UI (Title, Search, Dynamic Table, Edition popup, Pagination, ...)
 *  use it to quickly generate an "admin-style" view for your model
 *
 *          WORK IN PROGRESS ...
 **/
.directive('myoEntityUi', function(appdir) {
    return {
        restrict: 'E',
        scope: {
            'entity' : '=',
            'itemsByPage': '='
        },
        controller: function($scope, Restangular, Api) {

            if (!$scope.entity) {
                console.error('[myoEntityUi] Your entity definition object is missing !');
                return;
            }

            if (!$scope.entity.fields) {
                console.error('[myoEntityUi] Your entity definition object does not contain any fields.',
                    $scope.entity);
                return;
            }

            // Defaults
            if (!$scope.itemsByPage) {
                $scope.itemsByPage = 30;
            }

            //prepare headers for myo-table
            $scope.headers = _.filter($scope.entity.fields, function(field) {
                return field.display;
            });

            //prepare content for myo-table
            Api.paginate($scope.entity.reference,1 /* requested page number */, $scope.itemsByPage /* Number of items by page */).then(function(items){
                $scope.rows = items;
            });

        },
        templateUrl: appdir + '/myo/components/entityUi/entityUi.html'
    };
});

'use strict';

angular.module('myo')
.directive('myoNavbar', function(appdir) {
    return {
        restrict: 'E',
        replace: true,
        scope: {
            'appname': '=',
            'rawMenu': '=menuRight',
            'rawMenuLeft': '=menuLeft'
        },
        controller: function($scope, $rootScope, $state) {

            /**
             * generate menu from flat menu (passed in params)
             *
             *  the menu must be like this:
             *
             *    {
             *      'title1' : '#/link/to/page1',
             *      'title2' : '#/link/to/page2',
             *    }
             *
             *    Or like this:
             *    {
             *      'title1' : {
             *          link: '#/link/to/page1',
             *          subItems: {
             *            'subtitle1' : '#/link/to/page1/subtitle1',
             *            'subtitle2' : '#/link/to/page1/subtitle2'
             *          }
             *      },
             *      'title2' : '#/link/to/page2',
             *    }
             *
             *  Alternatively, you can have 2 menus (one on the left and one on the right), you need to add "menu-left"
             *  with the same parameters to your directive call
             *
             *
             **/

            $scope.menus = {
                'right': [],
                'left': []
            };
            _.each({'right': $scope.rawMenu, 'left': $scope.rawMenuLeft}, function(rawContent, menuKey) {
                if (rawContent) {
                    _.each(rawContent, function(link, title) {

                        if (_.isPlainObject(link)) {
                            //get subitems
                            var subItems = [];
                            if (link.subItems) {
                                _.each(link.subItems, function(sublink, subtitle) {
                                    subItems.push({
                                        title: subtitle,
                                        link: sublink,
                                        active: false
                                    });
                                });
                            }

                            $scope.menus[menuKey].push({
                                title: title,
                                link: link.link,
                                active: false,
                                subItems: subItems
                            });

                        } else {
                            $scope.menus[menuKey].push({
                                title: title,
                                link: link,
                                active: false
                            });
                        }
                    });
                }
            });

            function onLocationChange() {
                //go thru the menu and change the active param
                var url = $state.current.url;
                _.each($scope.menus, function(menu, menuKey) {
                    if (menu) {
                        _.each(menu, function(item) {
                            item.active = _.startsWith('#' + url, item.link);
                            if (item.subItems) {
                                _.each(item.subItems, function(subitem) {
                                    subitem.active = _.startsWith('#' + url, subitem.link);
                                });
                            }
                        });
                    }
                });
            }

            $rootScope.$on('$stateChangeStart', onLocationChange);
            onLocationChange();//call it on the first launch

        },
        templateUrl: appdir + '/myo/components/navbar/navbar.html'
    };
});

'use strict';

angular.module('myo')

/**
 *  myo-table directive
 *  
 *  
 *  
 **/

.directive('myoTable', function(appdir) {
    return {
        restrict: 'E',
        scope: {
            headers: '=', //table columns
            safeRows: '=rows', //table content from ajax call (array of objects)
            itemsByPage: '=' //number of items by page
        },
        controller: function($scope) {

            $scope.rows = [];

            //set default items by page
            if (!$scope.itemsByPage) {
                $scope.itemsByPage = 30;
            }

        },
        templateUrl: appdir + '/myo/components/table/table.html'
    };
})
