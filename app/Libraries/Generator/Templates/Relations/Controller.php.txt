    /**
     * @author LAHAXE Arnaud
     *
     * @param $id
     * @param $id$$RELATION_CAPITALIZE$$
     *
     * @return mixed
     *
     * @apiGroup $$MODEL_NAME_PLURAL_CAPITALIZED$$
     * @apiName update$$RELATION_CAPITALIZE$$
     * @api      {post} /$$MODEL_NAME_PLURAL$$/:id/$$RELATION$$/:id$$RELATION_CAPITALIZE$$ Update $$RELATION$$ for an $$MODEL_NAME_LOWER_CASE$$
     *
     * @apiUse ApiNotFound
     * @apiUse NotAuthorized
     *
     * @apiParam {Number} id $$MODEL_NAME$$ unique ID.
     * @apiParam {Number} id$$RELATION_CAPITALIZE$$ $$RELATION_CAPITALIZE$$ unique ID.
     * @apiSuccess (201) {Number} id Id.
     * @apiSuccess (201) {datetime} created_at Creation date.
     * @apiSuccess (201) {datetime} updated_at Last Update date.
     $$OUTPUT_MODEL_ATTRIBUTE_API_UPDATE$$
     */
    public function $$RELATION$$Update($id, $id$$RELATION_CAPITALIZE$$)
    {
        $this->addUserCriteria();
        $model = $this->repository->find($id);
        $$$RELATION$$Repository = \App::make(\App\Libraries\Repositories\$$RELATION_CAPITALIZE$$::class);
        $$$RELATION$$ = $$$RELATION$$Repository->find($id$$RELATION_CAPITALIZE$$);

        if (is_null($model) || is_null($$$RELATION$$)) {
            return response()->json([], 404);
        }

        $this->repository->set$$RELATION_CAPITALIZE$$($model, $$$RELATION$$);

        return response()->json($model, 202);
    }

